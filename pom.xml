<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.chj.gr</groupId>
	<artifactId>springboot-conf-eureka-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>springboot-conf-eureka-server</name>
	<description>Demo project for eureka-server</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
<!--		<version>3.4.3</version>-->
		<version>2.7.18</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>21</java.version>

		<spring-cloud.version>2021.0.9</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
		<!-- CAFFEINE -->
		<dependency>
			<groupId>com.github.ben-manes.caffeine</groupId>
			<artifactId>caffeine</artifactId>
			<version>3.1.8</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- Spring Boot Starter Data JPA -->
	    <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-data-jpa</artifactId>
	    </dependency>
	    <!-- PostgreSQL Driver -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-thymeleaf</artifactId>
	    </dependency>
	    <dependency>
	        <groupId>org.thymeleaf.extras</groupId>
	        <artifactId>thymeleaf-extras-springsecurity6</artifactId>
	        <version>3.1.2.RELEASE</version>
	    </dependency>
	    <dependency>
	        <groupId>org.webjars</groupId>
	        <artifactId>bootstrap</artifactId>
	        <version>5.3.3</version>
	    </dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!-- GIT-COMMIT-ID-PLUGIN -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>4.9.10</version>
				<executions>
					<execution>
						<id>get-the-git-infos</id>
						<goals>
							<goal>revision</goal>
						</goals>
						<phase>initialize</phase>
					</execution>
					<!--
			        <execution>
			            <id>validate-the-git-infos</id>
			            <goals>
			                <goal>validateRevision</goal>
			            </goals>
			            <phase>package</phase>
			        </execution>
			        -->
				</executions>
				<configuration>
					<generateGitPropertiesFile>true</generateGitPropertiesFile>
					<generateGitPropertiesFilename>
						${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
					<commitIdGenerationMode>full</commitIdGenerationMode>
					<!--
					<format>json</format>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>   			==> omit errors if Git
					repository has not been found
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>		==> If you want to
					specify custom .git repository location
					<prefix>git</prefix>											==> If you want to specify a custom property prefix
					<verbose>false</verbose>										==> For more generous logging

					<runOnlyOnce>true</runOnlyOnce>									==> When working with project with submodules,
					setting this flag makes sure that plugin works only for
					parent repository
					<excludeProperties>
					    <excludeProperty>git.user.*</excludeProperty>
					</excludeProperties>
					<gitDescribe>
			            <skip>false</skip>
			            <always>false</always>
			            <dirty>-dirty</dirty>
			        </gitDescribe>
					-->
					<includeOnlyProperties>
						<includeOnlyProperty>git.branch</includeOnlyProperty>
						<includeOnlyProperty>git.build.user.email</includeOnlyProperty>
						<includeOnlyProperty>git.build.version</includeOnlyProperty>
						<includeOnlyProperty>git.build.time</includeOnlyProperty>
						<includeOnlyProperty>git.commit.id.full</includeOnlyProperty>
						<includeOnlyProperty>git.commit.user.email</includeOnlyProperty>
						<includeOnlyProperty>git.commit.message.full</includeOnlyProperty>
						<includeOnlyProperty>git.commit.time</includeOnlyProperty>
						<includeOnlyProperty>git.dirty</includeOnlyProperty>
					</includeOnlyProperties>
					<!--
					<validationProperties>			        
						      <validationProperty>
			                <name>validating git dirty</name>
			                <value>${git.dirty}</value>
			                <shouldMatchTo>false</shouldMatchTo>
			            </validationProperty>
			            <validationProperty>
			                <name>validating git build user</name>
			                <value>${git.build.user.email}</value>
			                <shouldMatchTo>jihed.chaabanee@gmail.com</shouldMatchTo>
			            </validationProperty>
			        </validationProperties>
			        -->
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
